Progress Log #0: 23/06/2023

I have so far managed to set up the git repo for the project and I have also began to look at what
python library would be best for analysing fit files. A quick chatGPT query identified fitparse
to be a suitable library, one that breaks each part of data into a record that can then be broken
down even further into more individual components.

There have been a few discrepencies I have noticed thus far, such as some random timestamp values
that are stored but are from an hour or so before the actual activity that is stored in the file.
I will need to continue to find the most optimal way to parse this file and then set it up for 
analysis, probably using pandas or numpy for efficiency.

Progress Log #1: 26/06/23

Watched a "Programming with Mosh" tutorial that was over an hour explaining how to set up a react app,
and a few of the basics to go along with it. Will be helpful knowledge down the line hopefully!

Managed to parse the .fit file a bit more again but not made a great deal of progress.

Progress Log #2: 01/07/23

Been probably to long since I last spent a bit of time to look at this stuff, but I have now successfully
made a start on the react app and managed to create a couple of dummy components to display when the app
is set to run.

I have also briefly had a look at what would be the best option for hosting some sort of backend service
for the app, and I think I have decided on FastAPI as this is what was ultimately used in the team project
last semester so it will be good to have some real code to look at for hints and guidance. Just for simple 
python scripts to be run, but it could be good to have for down the line if I ever create a file upload
system that then subsequently stores the files on an online database, but may be getting a bit ahead of myself
with that one! Still a lot of learning to be done and I have to keep focussed even if it is just small
steps at a time.

----

Another update later in the day! Managed to make some moves with the FastAPI setup and I can now use the 
functions that I created earlier to parse an uploaded file on their docs page!


Progress Log #3: 02/07/2023

Am I actually getting anywhere? That is the question. Been watching more videos trying to work out how to
upload a file through react to axios, and I feel like I'm close but still struggling to fully understand
the concepts I am working with. The last blast of code that I used at the end was mostly produced by 
good old chatGPT, and I am trying to read through it and understand more but there is definitely still
a long way to go.

Progress Log #4: 03/07/2023

The code... is working?! Once again doing more browsing than actually writing code or working out logic of
stuff, but a last push once again from good old chatGPT to save the day at the end! So it is now set up 
so that a file can be uploaded to the fastAPI backend and the appropriate values are returned, or at least
logged on the console currently. I'm pretty sure it's still safe, dunno if CSRF attacks could happen or if it 
could actually work without using the specific localhost setup but so far so good.

Also watched some more videos trying to explain the concept of useState and useEffect, understand it a little
more now also.

Progress Log #5: 04/07/2023

Holy moly, it's like running in the dark with a blindfold on and noise cancelling earphones...  BUT, we
managed to get the average heart rate data to be returned from the file and it will now appear on screen
when an appropriate file is uploaded! It's difficult thinking about the hierarchy and what should be nested
in what but thank goodness we got there in the end with an okay amount of help from chatGPT but also just
a good bit of messing around trying to make the pesky code work, while getting more understanding with each
change. 

Code is maybe in a bit of a mess at the moment but I feel that I am getting somewhere now that I can soon
tidy it up and begin to do some nice formatting.

Progress Log #6: 06/07/2023

Only a couple modifications to the code as the Tour de France highlights may have been too interesting
not to watch. Managed to get all the data values to display on the main app page after a file has been
successfully uploaded, but I feel I have now come to realise that the structure may work best if I
adjust it to be more like all other programming hierarchies and form more of a tree.

So App at the top with all the variables declared, and then the stats all as separate components rather
than the current way I have done it with Stats.tsx. Any updated variables from file upload can then be
passed back upstream and then pushed down into the appropriate component. Will create diagrams for this
soon.

Prgoress Log #7: 07/07/2023

Watched a few more videos explaining how to structure a react project, what mistakes are common with
hooks and also what props actually are. I feel that I have currently got an okay structure, but with
it being a small project it isn't too much of a worry but good to try and keep some sort of standard.

I did make up a diagram for the app structure, but feel that the intermediate stats level is now
unnecessary so have not included it.

A few design steps have also been taken, adding some basic css to the page to try and get it looking
better. Although, like always with css it just has a sort of clunky look to it; I don't want to use
bootstrap so will try and learn some more proper css to make it look better.

Progress Log #8: 01/08/2023

Well, this was poor from me... Literally not done anything coding related in over 3 weeks. I wouldn't
say the time was wasted completely, have been doing massive amounts of training and a decent amount of
overtime at work, but motivation to code and go further with this project really just fell apart.

I am happy with the work that I put into this, I feel that it has really helped me understand the core
concepts and principles of React web development and also what the main differences are between typescript
and javascript. Planning out the hierarchy of the project was also good to work on and I now understand 
that it would definitely be easier to have as much of this framework thought out before writing too much
code just to avoid any file movement errors down the line in a project. Of course, I wouldn't go as far to
say that a Waterfall model approach should be used as I do see a benefit in keeping some flexibility but 
more planning would be good in the future.

In this commit I have managed to add in more error handling feautres such as only allowing the upload of
.fit files and raising a notification to the user if they have not selected an appropriate file. The 
returned format of the elapsed time and distance have also bee modified to be formatted in a nicer way.

The project itself was fun and I feel that the learnings from this will be useful at some point in the
future. Again, there could be many other improvements I could make to this but I am happy with the
result of this and feel that to try and keep motivation for coding going I am best to start a new 
project.

PROJECT END